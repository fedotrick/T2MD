from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.spinner import Spinner
from datetime import datetime, timedelta
from kivy.uix.popup import Popup
from kivy.uix.gridlayout import GridLayout
import calendar
import re
from kivy.core.window import Window
from kivy.uix.widget import Widget

class FocusableWidget:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—è–º"""
    def __init__(self):
        self.register_event_type('on_tab')
        self.register_event_type('on_shift_tab')
        self.register_event_type('on_up')
        self.register_event_type('on_down')

    def on_tab(self):
        pass

    def on_shift_tab(self):
        pass

    def on_up(self):
        pass

    def on_down(self):
        pass

class FocusableTextInput(TextInput, FocusableWidget):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        FocusableWidget.__init__(self)
        self.multiline = False
        self.write_tab = False

    def keyboard_on_key_down(self, window, keycode, text, modifiers):
        key, key_str = keycode
        if key_str == 'up':
            self.dispatch('on_up')
            return True
        elif key_str == 'down':
            self.dispatch('on_down')
            return True
        return super().keyboard_on_key_down(window, keycode, text, modifiers)

class TimeInput(FocusableTextInput):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.multiline = False
        self.hint_text = '–ß–ß:–ú–ú'
        self.input_type = 'number'
        self.last_value = ''
        self.bind(text=self.on_text)

    def insert_text(self, substring, from_undo=False):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if not substring.isdigit():
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        text = self.text
        cursor_pos = self.cursor[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        new_text = text[:cursor_pos] + substring + text[cursor_pos:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if len(new_text) > 5:
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ —á–∞—Å–æ–≤
        if len(new_text) == 2:
            if 0 <= int(new_text) <= 23:
                new_text += ':'
                substring = substring + ':'
            else:
                new_text = '23:'
                substring = '23:'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç—ã
        if len(new_text) == 5:
            hours, minutes = new_text.split(':')
            if int(minutes) > 59:
                new_text = f"{hours}:59"
                substring = new_text[cursor_pos:]
        
        super().insert_text(substring, from_undo)

    def on_text(self, instance, value):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if value and ':' in value:
            try:
                hours, minutes = value.split(':')
                if hours.isdigit() and minutes.isdigit():
                    if 0 <= int(hours) <= 23 and 0 <= int(minutes) <= 59:
                        self.last_value = value
            except ValueError:
                pass

class CalendarWidget(GridLayout):
    def __init__(self, callback, **kwargs):
        super().__init__(**kwargs)
        self.cols = 7
        self.callback = callback
        self.current_date = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.main_layout = BoxLayout(orientation='vertical')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_layout = BoxLayout(size_hint_y=None, height=40)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        self.prev_month = Button(text='<', size_hint_x=None, width=40)
        self.next_month = Button(text='>', size_hint_x=None, width=40)
        
        # –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        self.month_year_label = Label(text=self.get_month_year_text())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_layout.add_widget(self.prev_month)
        nav_layout.add_widget(self.month_year_label)
        nav_layout.add_widget(self.next_month)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–Ω–æ–ø–∫–∞–º
        self.prev_month.bind(on_press=self.previous_month)
        self.next_month.bind(on_press=self.next_month_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.main_layout.add_widget(nav_layout)
        
        # –°–æ–∑–¥–∞–µ–º grid –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        self.calendar_grid = GridLayout(cols=7)
        self.create_calendar()
        self.main_layout.add_widget(self.calendar_grid)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.add_widget(self.main_layout)

    def get_month_year_text(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–æ–º"""
        months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                 '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        return f"{months[self.current_date.month - 1]} {self.current_date.year}"

    def create_calendar(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É"""
        self.calendar_grid.clear_widgets()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for day in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']:
            self.calendar_grid.add_widget(Label(text=day))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        cal = calendar.monthcalendar(self.current_date.year, self.current_date.month)
        
        for week in cal:
            for day in week:
                if day == 0:
                    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                    self.calendar_grid.add_widget(Label(text=''))
                else:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –¥–Ω–µ–º
                    btn = Button(text=str(day))
                    btn.bind(on_press=lambda x, d=day: self.on_day_select(d))
                    # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
                    if (day == datetime.now().day and 
                        self.current_date.month == datetime.now().month and 
                        self.current_date.year == datetime.now().year):
                        btn.background_color = (0.5, 0.8, 0.5, 1)  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                    self.calendar_grid.add_widget(btn)

    def previous_month(self, instance):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"""
        if self.current_date.month == 1:
            self.current_date = self.current_date.replace(year=self.current_date.year - 1, month=12)
        else:
            self.current_date = self.current_date.replace(month=self.current_date.month - 1)
        
        self.month_year_label.text = self.get_month_year_text()
        self.create_calendar()

    def next_month_handler(self, instance):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"""
        if self.current_date.month == 12:
            self.current_date = self.current_date.replace(year=self.current_date.year + 1, month=1)
        else:
            self.current_date = self.current_date.replace(month=self.current_date.month + 1)
        
        self.month_year_label.text = self.get_month_year_text()
        self.create_calendar()

    def on_day_select(self, day):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
        date = f"{day:02d}.{self.current_date.month:02d}.{self.current_date.year}"
        self.callback(date)

class ReportGenerator(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.orientation = 'vertical'
        self.padding = 10
        self.spacing = 10
        
        # –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö) –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—á–∏
        self.norms = {
            '–ü–µ—á—å 1': {
                '—Ü–∏–∫–ª1': 510,  # 8:30
                '—Ü–∏–∫–ª2': 210,  # 3:30
                '–ø–µ—Ä–µ—Ä—ã–≤': 40,  # 0:40
                '–æ–±—â–µ–µ': 760   # 12:40
            },
            '–ü–µ—á—å 2': {
                '—Ü–∏–∫–ª1': 660,  # 11:00
                '—Ü–∏–∫–ª2': 210,  # 3:30
                '–ø–µ—Ä–µ—Ä—ã–≤': 40,  # 0:40
                '–æ–±—â–µ–µ': 910   # 15:10
            }
        }

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.input_fields = []
        
        # –î–∞—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        date_layout = BoxLayout(size_hint_y=None, height=40)
        self.date_input = FocusableTextInput(
            hint_text='–î–∞—Ç–∞ (–¥–¥.–º–º.–≥–≥–≥–≥)',
            multiline=False
        )
        date_button = Button(
            text='üìÖ',
            size_hint_x=None,
            width=40
        )
        date_button.bind(on_press=self.show_calendar)
        date_layout.add_widget(Label(text='–î–∞—Ç–∞:', size_hint_x=0.3))
        date_layout.add_widget(self.date_input)
        date_layout.add_widget(date_button)
        self.add_widget(date_layout)
        self.input_fields.append(self.date_input)
        
        # –ù–æ–º–µ—Ä –ø–µ—á–∏
        furnace_layout = BoxLayout(size_hint_y=None, height=40)
        self.furnace_spinner = Spinner(
            text='–ü–µ—á—å 1',
            values=('–ü–µ—á—å 1', '–ü–µ—á—å 2'),
            size_hint_x=0.7
        )
        furnace_layout.add_widget(Label(text='–ü–µ—á—å:', size_hint_x=0.3))
        furnace_layout.add_widget(self.furnace_spinner)
        self.add_widget(furnace_layout)

        # –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1
        self.add_widget(Label(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ 1'))
        
        prog1_start_layout = BoxLayout(size_hint_y=None, height=40)
        self.prog1_start = TimeInput()
        prog1_start_layout.add_widget(Label(text='–í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è:', size_hint_x=0.3))
        prog1_start_layout.add_widget(self.prog1_start)
        self.add_widget(prog1_start_layout)
        self.input_fields.append(self.prog1_start)

        prog1_end_layout = BoxLayout(size_hint_y=None, height=40)
        self.prog1_end = TimeInput()
        prog1_end_layout.add_widget(Label(text='–í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:', size_hint_x=0.3))
        prog1_end_layout.add_widget(self.prog1_end)
        self.add_widget(prog1_end_layout)
        self.input_fields.append(self.prog1_end)

        # –ü—Ä–æ–≥—Ä–∞–º–º–∞ 2
        self.add_widget(Label(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ 2'))
        
        prog2_start_layout = BoxLayout(size_hint_y=None, height=40)
        self.prog2_start = TimeInput()
        prog2_start_layout.add_widget(Label(text='–í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è:', size_hint_x=0.3))
        prog2_start_layout.add_widget(self.prog2_start)
        self.add_widget(prog2_start_layout)
        self.input_fields.append(self.prog2_start)

        prog2_end_layout = BoxLayout(size_hint_y=None, height=40)
        self.prog2_end = TimeInput()
        prog2_end_layout.add_widget(Label(text='–í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è:', size_hint_x=0.3))
        prog2_end_layout.add_widget(self.prog2_end)
        self.add_widget(prog2_end_layout)
        self.input_fields.append(self.prog2_end)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.add_widget(Label(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'))
        self.notifications_input = FocusableTextInput(
            hint_text='–í–≤–µ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            multiline=True,
            size_hint_y=None,
            height=100
        )
        self.add_widget(self.notifications_input)
        self.input_fields.append(self.notifications_input)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        for i, field in enumerate(self.input_fields):
            field.bind(
                on_up=lambda x, idx=i: self.focus_previous_field(idx),
                on_down=lambda x, idx=i: self.focus_next_field(idx)
            )

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        self.add_widget(Button(
            text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç',
            size_hint_y=None,
            height=50,
            on_press=self.generate_report
        ))

    def calculate_time_difference(self, start_time, end_time):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞"""
        start = datetime.strptime(start_time, '%H:%M')
        end = datetime.strptime(end_time, '%H:%M')
        
        if end < start:
            end += timedelta(days=1)
            
        diff = end - start
        return diff.seconds // 60  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö

    def calculate_deviation(self, actual, norm):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        deviation = ((actual - norm) / norm) * 100
        return deviation

    def format_time(self, minutes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –ß–ß:–ú–ú"""
        hours = minutes // 60
        mins = minutes % 60
        return f"{hours:02d}:{mins:02d}"

    def show_calendar(self, instance):
        content = CalendarWidget(callback=self.on_date_select)
        self.calendar_popup = Popup(
            title='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
            content=content,
            size_hint=(None, None),
            size=(400, 400)
        )
        self.calendar_popup.open()

    def on_date_select(self, date):
        self.date_input.text = date
        self.calendar_popup.dismiss()

    def focus_next_field(self, current_idx):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é"""
        next_idx = (current_idx + 1) % len(self.input_fields)
        self.input_fields[next_idx].focus = True

    def focus_previous_field(self, current_idx):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ–ª—é"""
        prev_idx = (current_idx - 1) % len(self.input_fields)
        self.input_fields[prev_idx].focus = True

    def clear_fields(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞"""
        for field in self.input_fields:
            field.text = ''
        self.furnace_spinner.text = '–ü–µ—á—å 1'

    def generate_report(self, instance):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—á–∏
            current_norms = self.norms[self.furnace_spinner.text]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º
            program1_time = self.calculate_time_difference(
                self.prog1_start.text,
                self.prog1_end.text
            )
            
            program2_time = self.calculate_time_difference(
                self.prog2_start.text,
                self.prog2_end.text
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã –∏ –ø–µ—Ä–µ—Ä—ã–≤
            stage1_time = program1_time  # –≠—Ç–∞–ø 1 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã 1
            stage2_time = program2_time  # –≠—Ç–∞–ø 2 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã 2
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∫–æ–Ω—Ü–æ–º –ü—Ä–æ–≥—Ä–∞–º–º—ã 1 –∏ –Ω–∞—á–∞–ª–æ–º –ü—Ä–æ–≥—Ä–∞–º–º—ã 2
            break_time = self.calculate_time_difference(
                self.prog1_end.text,
                self.prog2_start.text
            )
            
            # –û–±—â–µ–µ –≤—Ä–µ–º—è - —Å—É–º–º–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
            total_time = stage1_time + stage2_time + break_time

            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            stage1_dev = self.calculate_deviation(stage1_time, current_norms['—Ü–∏–∫–ª1'])
            stage2_dev = self.calculate_deviation(stage2_time, current_norms['—Ü–∏–∫–ª2'])
            break_dev = self.calculate_deviation(break_time, current_norms['–ø–µ—Ä–µ—Ä—ã–≤'])
            total_dev = self.calculate_deviation(total_time, current_norms['–æ–±—â–µ–µ'])

            # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications = self.notifications_input.text.strip()
            if not notifications:
                notifications = "–í—Å—ë –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–æ –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_template = f"""üî• **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –¢–ï–†–ú–û–û–ë–†–ê–ë–û–¢–ö–ï** üî•  
                    **–∑–∞** üìÖ **{self.date_input.text}**  
üè≠ **–õ–∏—Ç–µ–π–Ω—ã–π —Ü–µ—Ö | –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –§–µ–¥–æ—Ç–æ–≤ –ê.–ê.**
‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨  
üîò **{self.furnace_spinner.text}** | üì∂ **–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞**
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  
‚îÇ **–ü—Ä–æ–≥—Ä–∞–º–º–∞ 1**              ‚îÇ **–ü—Ä–æ–≥—Ä–∞–º–º–∞ 2**             ‚îÇ  
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§  
‚îÇ üïñ –í–ö–õ: `{self.prog1_start.text}`           ‚îÇ üïñ –í–ö–õ: `{self.prog2_start.text}`          ‚îÇ  
‚îÇ üïö –í–´–ö–õ: `{self.prog1_end.text}`        ‚îÇ üïö –í–´–ö–õ: `{self.prog2_end.text}`       ‚îÇ  
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  
‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨  
üìä **–ê–ù–ê–õ–ò–¢–ò–ö–ê**
‚Ä¢ üü¢ –≠—Ç–∞–ø 1: `{self.format_time(stage1_time)}` ({self.get_deviation_symbol(stage1_dev)} **{stage1_dev:.2f}%** –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π **–Ω–æ—Ä–º—ã**)  
‚Ä¢ üü° –≠—Ç–∞–ø 2: `{self.format_time(stage2_time)}` ({self.get_deviation_symbol(stage2_dev)} **{stage2_dev:.2f}%** –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π **–Ω–æ—Ä–º—ã**)  
‚Ä¢ ‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤: `{self.format_time(break_time)}`  ({self.get_deviation_symbol(break_dev)} **{break_dev:.2f}%** –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π **–Ω–æ—Ä–º—ã**)
‚Ä¢ üìå **–û–±—â–µ–µ –≤—Ä–µ–º—è: {self.format_time(total_time)}** ({self.get_deviation_symbol(total_dev)} **{total_dev:.2f}%** –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π **–Ω–æ—Ä–º—ã**)
‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨  
üö® **–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø**
‚ö†Ô∏è **{notifications}**
‚úÖ **`–¢–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞: ‚ñ∞‚ñ∞‚ñ∞‚ñ∞ 100%`**
‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨"""

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            with open(f'–û—Ç—á–µ—Ç_{self.date_input.text.replace(".", "_")}.md', 'w', encoding='utf-8') as f:
                f.write(report_template)

            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            self.clear_fields()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            popup = Popup(
                title='–£—Å–ø–µ—Ö',
                content=Label(text='–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'),
                size_hint=(None, None),
                size=(300, 150)
            )
            popup.open()

        except Exception as e:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            popup = Popup(
                title='–û—à–∏–±–∫–∞',
                content=Label(text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:\n{str(e)}'),
                size_hint=(None, None),
                size=(400, 200)
            )
            popup.open()

    def get_deviation_symbol(self, deviation):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"""
        if deviation > 0:
            return "üî∫"
        elif deviation < 0:
            return "üîª"
        return "‚ùé"

class ReportApp(App):
    def build(self):
        return ReportGenerator()

if __name__ == '__main__':
    ReportApp().run() 